<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Amigo Secreto - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            background: linear-gradient(135deg, #000000 0%, #1a1a1a 50%, #8B0000 100%);
            min-height: 100vh;
        }
        .navbar {
            background: linear-gradient(135deg, #DAA520 0%, #B8860B 100%) !important;
            border-bottom: 3px solid #8B0000;
        }
        .navbar-brand, .navbar-text {
            color: #000 !important;
            font-weight: bold;
        }
        .card {
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            margin-bottom: 2rem;
            border: 2px solid #DAA520;
        }
        .card-header {
            background: linear-gradient(135deg, #DAA520 0%, #B8860B 100%);
            color: #000;
            border-radius: 15px 15px 0 0 !important;
            border-bottom: 2px solid #8B0000;
            font-weight: bold;
        }
        .secret-card {
            background: linear-gradient(135deg, #8B0000 0%, #DC143C 100%);
            color: white;
            border: 3px solid #DAA520;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .secret-card:hover {
            transform: scale(1.02);
            box-shadow: 0 15px 40px rgba(139, 0, 0, 0.5);
        }
        .secret-card .card-body {
            background: transparent;
        }
        .gift-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        
        /* Animaciones para el misterio del amigo secreto */
        .mystery-card {
            background: linear-gradient(135deg, #2c2c2c 0%, #1a1a1a 100%);
            border: 3px solid #DAA520;
            cursor: pointer;
            transition: all 0.5s ease;
            position: relative;
            overflow: hidden;
            color: white;
        }
        
        .mystery-card * {
            color: white !important;
        }
        
        .mystery-card h4,
        .mystery-card p,
        .mystery-card small,
        .mystery-card div {
            color: white !important;
        }
        
        .mystery-card:hover {
            transform: scale(1.05);
            box-shadow: 0 20px 50px rgba(218, 165, 32, 0.3);
        }
        
        .mystery-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(218, 165, 32, 0.1), transparent);
            animation: shimmer 2s infinite;
        }
        
        @keyframes shimmer {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }
        
        @keyframes revealPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        @keyframes mysteryGlow {
            0%, 100% { 
                box-shadow: 0 0 20px rgba(218, 165, 32, 0.5);
                border-color: #DAA520;
            }
            50% { 
                box-shadow: 0 0 40px rgba(139, 0, 0, 0.8), 0 0 60px rgba(218, 165, 32, 0.6);
                border-color: #8B0000;
            }
        }
        
        .mystery-active {
            animation: mysteryGlow 1.5s infinite ease-in-out;
            color: white;
        }
        
        .reveal-animation {
            animation: revealPulse 0.8s ease-out;
            color: white;
        }
        
        .mystery-text {
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            font-size: 1.2em;
            color: white;
        }
        
        .click-hint {
            opacity: 0.8;
            font-size: 0.9em;
            animation: pulse 2s infinite;
            color: white;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 0.8; }
            50% { opacity: 1; }
        }
        
        .revealed-card {
            background: linear-gradient(135deg, #8B0000 0%, #DC143C 100%) !important;
            animation: revealPulse 1s ease-out;
            color: white !important;
        }
        
        .revealed-card * {
            color: white !important;
        }
        
        .mystery-icons {
            font-size: 2rem;
            margin: 0 10px;
            animation: float 3s ease-in-out infinite;
            color: white;
        }
        
        .mystery-icons:nth-child(2) { animation-delay: 0.5s; }
        .mystery-icons:nth-child(3) { animation-delay: 1s; }
        .mystery-icons:nth-child(4) { animation-delay: 1.5s; }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        /* Estilos para la ruleta */
        .roulette-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }
        
        .roulette-pointer-container {
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .roulette-pointer {
            position: absolute;
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 32px;
            color: #DAA520;
            text-shadow: 0 2px 4px rgba(0,0,0,0.8), 0 0 15px rgba(218, 165, 32, 1);
            z-index: 12;
            pointer-events: none;
            animation: pointerGlow 1.5s ease-in-out infinite alternate;
        }
        
        @keyframes pointerGlow {
            0% {
                text-shadow: 0 2px 4px rgba(0,0,0,0.8), 0 0 15px rgba(218, 165, 32, 0.8);
                transform: translateX(-50%) scale(1);
            }
            100% {
                text-shadow: 0 2px 4px rgba(0,0,0,0.8), 0 0 25px rgba(218, 165, 32, 1), 0 0 35px rgba(139, 0, 0, 0.5);
                transform: translateX(-50%) scale(1.1);
            }
        }
        
        .roulette-wheel {
            width: 300px;
            height: 300px;
            border-radius: 50%;
            position: relative;
            border: 10px solid #DAA520;
            box-shadow: 0 0 30px rgba(218, 165, 32, 0.6), 0 0 60px rgba(218, 165, 32, 0.3);
            background: conic-gradient(
                from 0deg,
                #8B0000 0deg 60deg,
                #DAA520 60deg 120deg,
                #DC143C 120deg 180deg,
                #B8860B 180deg 240deg,
                #8B0000 240deg 300deg,
                #DAA520 300deg 360deg
            );
            animation: wheelGlow 2s ease-in-out infinite alternate;
            transition: transform 3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }
        
        .roulette-wheel::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 40px;
            height: 40px;
            background: #DAA520;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            z-index: 10;
            border: 3px solid #000;
        }
        
        .roulette-title {
            position: absolute;
            top: 80px;
            left: 50%;
            transform: translateX(-50%);
            color: #DAA520;
            font-size: 2rem;
            font-weight: bold;
            text-align: center;
            text-shadow: 0 2px 4px rgba(0,0,0,0.8);
            animation: titlePulse 2s ease-in-out infinite alternate;
        }
        
        .roulette-subtitle {
            position: absolute;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            color: #DAA520;
            font-size: 1.2rem;
            text-align: center;
            text-shadow: 0 2px 4px rgba(0,0,0,0.8);
            animation: float 3s ease-in-out infinite;
        }
        
        @keyframes titlePulse {
            0% {
                color: #DAA520;
                text-shadow: 0 2px 4px rgba(0,0,0,0.8), 0 0 20px rgba(218, 165, 32, 0.6);
            }
            100% {
                color: #DC143C;
                text-shadow: 0 2px 4px rgba(0,0,0,0.8), 0 0 30px rgba(220, 20, 60, 0.8);
            }
        }
        
        @keyframes wheelGlow {
            0% {
                box-shadow: 0 0 30px rgba(218, 165, 32, 0.6), 0 0 60px rgba(218, 165, 32, 0.3);
            }
            100% {
                box-shadow: 0 0 40px rgba(218, 165, 32, 0.8), 0 0 80px rgba(218, 165, 32, 0.5), 0 0 100px rgba(139, 0, 0, 0.3);
            }
        }
        
        .roulette-names {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .roulette-name {
            position: absolute;
            color: white;
            font-weight: bold;
            font-size: 14px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            transform-origin: center;
        }
        
        .roulette-name:nth-child(1) { transform: rotate(30deg) translateY(-120px); }
        .roulette-name:nth-child(2) { transform: rotate(90deg) translateY(-120px); }
        .roulette-name:nth-child(3) { transform: rotate(150deg) translateY(-120px); }
        .roulette-name:nth-child(4) { transform: rotate(210deg) translateY(-120px); }
        .roulette-name:nth-child(5) { transform: rotate(270deg) translateY(-120px); }
        .roulette-name:nth-child(6) { transform: rotate(330deg) translateY(-120px); }
        
        .roulette-title {
            position: absolute;
            top: 50px;
            left: 50%;
            transform: translateX(-50%);
            color: #DAA520;
            font-size: 2rem;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            animation: pulse 2s infinite;
        }
        
        .roulette-subtitle {
            position: absolute;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            color: white;
            font-size: 1.2rem;
            text-align: center;
            opacity: 0.9;
        }
        .btn-primary {
            background: linear-gradient(135deg, #DAA520 0%, #B8860B 100%);
            border: 2px solid #8B0000;
            color: #000;
            font-weight: bold;
        }
        .btn-primary:hover {
            background: linear-gradient(135deg, #B8860B 0%, #DAA520 100%);
            border: 2px solid #8B0000;
            color: #000;
        }
        .btn-outline-primary {
            border-color: #8B0000;
            color: #8B0000;
            font-weight: bold;
        }
        .btn-outline-primary:hover {
            background-color: #8B0000;
            border-color: #8B0000;
            color: #DAA520;
        }
        .btn-outline-secondary {
            border-color: #DAA520;
            color: #DAA520;
            font-weight: bold;
        }
        .btn-outline-secondary:hover {
            background-color: #DAA520;
            border-color: #DAA520;
            color: #000;
        }
        .badge.bg-success {
            background-color: #8B0000 !important;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <span class="navbar-brand">⚡ TITANES ELITE - Amigo Secreto</span>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">Hola, <strong><%= user.username %></strong></span>
                <% if (games.length > 0 && myAssignment) { %>
                    <a class="nav-link btn btn-outline-primary btn-sm me-2" href="/chat">
                        <i class="fas fa-comments"></i> Chat Secreto
                    </a>
                <% } %>
                <% if (user.is_admin) { %>
                    <a class="nav-link btn btn-outline-primary btn-sm me-2" href="/admin">Panel Admin</a>
                <% } %>
                <a class="nav-link btn btn-outline-secondary btn-sm" href="/logout">Cerrar Sesión</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- Estado del juego -->
        <% if (games.length === 0) { %>
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="card text-center">
                        <div class="card-body">
                            <div class="gift-icon">🎁</div>
                            <h3>No hay juegos activos</h3>
                            <p class="text-muted">Espera a que un administrador active un juego de Amigo Secreto.</p>
                            <% if (user.is_admin) { %>
                                <a href="/admin" class="btn btn-primary">Ir al Panel de Administración</a>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        <% } else { %>
            <!-- Juego activo -->
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h4><i class="fas fa-gamepad"></i> Juego Activo</h4>
                        </div>
                        <div class="card-body">
                            <h5><%= games[0].name %></h5>
                            <p class="text-muted">Estado: <span class="badge bg-success">Activo</span></p>
                            <p><small>Creado el <%= new Date(games[0].created_at).toLocaleDateString() %></small></p>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <% if (myAssignment) { %>
                        <!-- Mostrar asignación con misterio -->
                        <div class="card mystery-card mystery-active" id="mysteryCard" onclick="revealSecret()">
                            <div class="card-body text-center">
                                <div class="mystery-content" id="mysteryContent">
                                    <div class="gift-icon">🎁</div>
                                    <div class="mystery-icons-container mb-3">
                                        <span class="mystery-icons">🔮</span>
                                        <span class="mystery-icons">✨</span>
                                        <span class="mystery-icons">❓</span>
                                        <span class="mystery-icons">🎭</span>
                                    </div>
                                    <h4 class="mystery-text">¡Tu Amigo Secreto te Espera!</h4>
                                    <p class="mb-3">La ruleta del destino decidirá...</p>
                                    <div class="click-hint">
                                        <i class="fas fa-hand-pointer"></i> Haz clic para girar la ruleta 🎰
                                    </div>
                                </div>
                                
                                <div class="revealed-content" id="revealedContent" style="display: none;">
                                    <div class="gift-icon">🎉</div>
                                    <h4>¡Tu Amigo Secreto es:</h4>
                                    <h2 class="mb-3 text-warning"><strong><%= myAssignment.assigned_username %></strong></h2>
                                    <p class="mb-2">¡Prepara un regalo especial! �</p>
                                    <small>⚠️ No puedes cambiar tu asignación</small>
                                    <div class="mt-3">
                                        <a href="/chat" class="btn btn-sm btn-outline-light me-2">
                                            <i class="fas fa-comments"></i> Chat Secreto
                                        </a>
                                        <button class="btn btn-sm btn-outline-light" onclick="hideSecret()">
                                            <i class="fas fa-eye-slash"></i> Ocultar nuevamente
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% } else { %>
                        <!-- Sin asignación -->
                        <div class="card">
                            <div class="card-body text-center">
                                <div class="gift-icon text-muted">❓</div>
                                <h4>Esperando asignación...</h4>
                                <p class="text-muted">El administrador aún no ha generado las asignaciones para este juego.</p>
                            </div>
                        </div>
                    <% } %>
                </div>
            </div>
            
            <!-- Instrucciones -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h4>📋 Instrucciones</h4>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="text-center mb-3">
                                        <div style="font-size: 2rem;">🎯</div>
                                        <h5>1. Tu Misión</h5>
                                        <p>Prepara un regalo para la persona que te fue asignada</p>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center mb-3">
                                        <div style="font-size: 2rem;">🤐</div>
                                        <h5>2. Mantén el Secreto</h5>
                                        <p>No reveles que eres el amigo secreto de esa persona</p>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center mb-3">
                                        <div style="font-size: 2rem;">🔒</div>
                                        <h5>3. Garantía</h5>
                                        <p>El sistema garantiza que nunca serás tu propio amigo secreto</p>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center mb-3">
                                        <div style="font-size: 2rem;">🎉</div>
                                        <h5>4. ¡Diviértete!</h5>
                                        <p>Disfruta la sorpresa y la emoción del intercambio</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <% } %>
    </div>

    <!-- Contenedor de la ruleta -->
    <div class="roulette-container" id="rouletteContainer">
        <div class="roulette-title">🎰 RULETA DEL AMIGO SECRETO</div>
        <div class="roulette-pointer-container">
            <div class="roulette-pointer">▼</div>
            <div class="roulette-wheel" id="rouletteWheel">
                <div class="roulette-names" id="rouletteNames">
                    <!-- Los nombres se llenarán dinámicamente -->
                </div>
            </div>
        </div>
        <div class="roulette-subtitle">Girando para encontrar tu amigo secreto...</div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        let isRevealed = false;
        
        function revealSecret() {
            if (isRevealed) return;
            
            // Mostrar la ruleta
            showRoulette();
        }
        
        function showRoulette() {
            const rouletteContainer = document.getElementById('rouletteContainer');
            const rouletteWheel = document.getElementById('rouletteWheel');
            const rouletteNames = document.getElementById('rouletteNames');
            
            // Obtener el nombre del amigo secreto asignado
            const secretName = '<%= myAssignment ? myAssignment.assigned_username : "Usuario" %>';
            
            // Obtener todos los nombres de usuarios de la base de datos
            const allUsersFromDB = <%- JSON.stringify(allUsers || []) %>;
            
            // Si no hay usuarios, usar nombres por defecto
            if (allUsersFromDB.length === 0) {
                allUsersFromDB.push('Usuario1', 'Usuario2', 'Usuario3', 'Usuario4', 'Usuario5');
            }
            
            // Crear una lista de nombres para mostrar en la ruleta
            let rouletteNames_list = [...allUsersFromDB];
            
            // Si el nombre secreto no está en la lista, agregarlo
            if (!rouletteNames_list.includes(secretName)) {
                rouletteNames_list.push(secretName);
            }
            
            // Mezclar los nombres
            shuffleArray(rouletteNames_list);
            
            // Tomar solo 6 nombres
            const finalNames = rouletteNames_list.slice(0, 6);
            
            // Asegurarse de que el nombre secreto esté incluido
            if (!finalNames.includes(secretName)) {
                finalNames[5] = secretName; // Reemplazar el último
            }
            
            // Posicionar el nombre secreto en una posición específica (posición 0 para que quede arriba)
            const secretIndex = finalNames.indexOf(secretName);
            if (secretIndex !== 0) {
                // Intercambiar para que el secreto quede en posición 0
                [finalNames[0], finalNames[secretIndex]] = [finalNames[secretIndex], finalNames[0]];
            }
            
            // Limpiar nombres anteriores
            rouletteNames.innerHTML = '';
            
            // Agregar nombres a la ruleta
            finalNames.forEach((name, index) => {
                const nameElement = document.createElement('div');
                nameElement.className = 'roulette-name';
                nameElement.textContent = name;
                nameElement.style.transform = `rotate(${index * 60}deg) translateY(-120px)`;
                rouletteNames.appendChild(nameElement);
            });
            
            // Mostrar la ruleta
            rouletteContainer.style.display = 'flex';
            
            // Agregar efectos sonoros
            playRouletteSound();
            
            // Calcular rotación para que termine en la posición correcta (nombre secreto en posición 0)
            // Queremos que termine con el nombre secreto arriba (posición 0 = 0 grados)
            const finalRotation = 1440; // 4 vueltas completas para terminar en la posición original
            
            // Aplicar la rotación directamente con CSS
            setTimeout(() => {
                rouletteWheel.style.transform = `rotate(${finalRotation}deg)`;
                rouletteWheel.style.transition = 'transform 3s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                
                // Después de que termine la animación, mostrar el resultado
                setTimeout(() => {
                    hideRoulette();
                    showSecretResult();
                }, 3200);
                
            }, 500);
        }
        
        function hideRoulette() {
            const rouletteContainer = document.getElementById('rouletteContainer');
            rouletteContainer.style.opacity = '0';
            rouletteContainer.style.transition = 'opacity 0.5s ease-out';
            
            setTimeout(() => {
                rouletteContainer.style.display = 'none';
                rouletteContainer.style.opacity = '1';
                rouletteContainer.style.transition = '';
                
                // Resetear la ruleta para la próxima vez
                const rouletteWheel = document.getElementById('rouletteWheel');
                rouletteWheel.classList.remove('roulette-spinning');
                rouletteWheel.style.animation = ''; // Limpiar animación personalizada
                rouletteWheel.style.transform = ''; // Resetear transformación
            }, 500);
        }
        
        function showSecretResult() {
            const mysteryCard = document.getElementById('mysteryCard');
            const mysteryContent = document.getElementById('mysteryContent');
            const revealedContent = document.getElementById('revealedContent');
            
            // Animación de transición en la tarjeta
            mysteryCard.style.transition = 'all 0.8s ease-out';
            mysteryCard.classList.remove('mystery-active');
            mysteryCard.classList.add('reveal-animation');
            
            // Ocultar contenido misterioso
            mysteryContent.style.opacity = '0';
            mysteryContent.style.transform = 'scale(0.8)';
            mysteryContent.style.transition = 'all 0.5s ease-out';
            
            setTimeout(() => {
                mysteryContent.style.display = 'none';
                revealedContent.style.display = 'block';
                revealedContent.style.opacity = '0';
                revealedContent.style.transform = 'scale(0.8)';
                
                // Cambiar el fondo de la tarjeta
                mysteryCard.classList.add('revealed-card');
                
                setTimeout(() => {
                    revealedContent.style.transition = 'all 0.6s ease-out';
                    revealedContent.style.opacity = '1';
                    revealedContent.style.transform = 'scale(1)';
                    
                    // Efecto de confetti
                    createConfetti();
                    
                    // Sonido de victoria
                    setTimeout(() => {
                        playWinSound();
                    }, 200);
                    
                    isRevealed = true;
                }, 100);
            }, 500);
        }
        
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }
        
        function hideSecret() {
            if (!isRevealed) return;
            
            const mysteryCard = document.getElementById('mysteryCard');
            const mysteryContent = document.getElementById('mysteryContent');
            const revealedContent = document.getElementById('revealedContent');
            
            // Ocultar contenido revelado
            revealedContent.style.transition = 'all 0.5s ease-out';
            revealedContent.style.opacity = '0';
            revealedContent.style.transform = 'scale(0.8)';
            
            setTimeout(() => {
                revealedContent.style.display = 'none';
                mysteryContent.style.display = 'block';
                mysteryContent.style.opacity = '0';
                mysteryContent.style.transform = 'scale(0.8)';
                
                // Restaurar el fondo misterioso
                mysteryCard.classList.remove('revealed-card');
                mysteryCard.classList.add('mystery-active');
                
                setTimeout(() => {
                    mysteryContent.style.transition = 'all 0.6s ease-out';
                    mysteryContent.style.opacity = '1';
                    mysteryContent.style.transform = 'scale(1)';
                    
                    isRevealed = false;
                }, 100);
            }, 500);
        }
        
        // Funciones de sonido mejoradas usando Web Audio API
        function playRouletteSound() {
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const duration = 3; // 3 segundos
                const startTime = audioContext.currentTime;
                
                // Crear un sonido más complejo y realista
                createRouletteMainSound(audioContext, startTime, duration);
                createRouletteTickSound(audioContext, startTime, duration);
                createRouletteWhooshSound(audioContext, startTime, duration);
                
            } catch (error) {
                console.log('Audio no soportado en este navegador:', error);
            }
        }
        
        function createRouletteMainSound(audioContext, startTime, duration) {
            // Sonido base de rotación con filtros
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            const filter = audioContext.createBiquadFilter();
            const distortion = audioContext.createWaveShaper();
            
            // Configurar filtro pasa-bajos para sonido más suave
            filter.type = 'lowpass';
            filter.frequency.setValueAtTime(800, startTime);
            filter.Q.setValueAtTime(1, startTime);
            
            // Crear distorsión sutil para más realismo
            const curve = new Float32Array(44100);
            for (let i = 0; i < 44100; i++) {
                const x = (i / 44100) * 2 - 1;
                curve[i] = x * 0.1;
            }
            distortion.curve = curve;
            
            // Conectar la cadena de audio
            oscillator.connect(distortion);
            distortion.connect(filter);
            filter.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            // Configurar oscilador con vibrato
            oscillator.type = 'sawtooth';
            oscillator.frequency.setValueAtTime(120, startTime);
            
            // Crear efecto de desaceleración más realista
            for (let i = 0; i < duration * 20; i++) {
                const time = startTime + (i / 20);
                const progress = i / (duration * 20);
                
                // Curva de desaceleración exponencial
                const speed = Math.pow(1 - progress, 2);
                const baseFreq = 120 + (speed * 80);
                const vibrato = Math.sin(time * 15) * 5 * speed;
                
                oscillator.frequency.setValueAtTime(baseFreq + vibrato, time);
                gainNode.gain.setValueAtTime(0.15 * speed, time);
                filter.frequency.setValueAtTime(600 + (speed * 400), time);
            }
            
            oscillator.start(startTime);
            oscillator.stop(startTime + duration);
        }
        
        function createRouletteTickSound(audioContext, startTime, duration) {
            let tickInterval = 0.08; // Inicio rápido
            let currentTime = startTime + 0.1;
            let tickCount = 0;
            
            while (currentTime < startTime + duration) {
                const progress = (currentTime - startTime) / duration;
                
                // Crear tick individual con mejor calidad
                const tickOsc = audioContext.createOscillator();
                const tickGain = audioContext.createGain();
                const tickFilter = audioContext.createBiquadFilter();
                const envelope = audioContext.createGain();
                
                // Configurar filtro para el tick
                tickFilter.type = 'bandpass';
                tickFilter.frequency.setValueAtTime(1200, currentTime);
                tickFilter.Q.setValueAtTime(8, currentTime);
                
                // Conectar
                tickOsc.connect(envelope);
                envelope.connect(tickFilter);
                tickFilter.connect(tickGain);
                tickGain.connect(audioContext.destination);
                
                // Configurar tick
                tickOsc.type = 'square';
                tickOsc.frequency.setValueAtTime(1200 + (Math.random() * 200 - 100), currentTime);
                
                // Envelope más natural
                envelope.gain.setValueAtTime(0, currentTime);
                envelope.gain.linearRampToValueAtTime(0.25, currentTime + 0.005);
                envelope.gain.exponentialRampToValueAtTime(0.001, currentTime + 0.08);
                
                tickGain.gain.setValueAtTime(1 - progress * 0.7, currentTime);
                
                tickOsc.start(currentTime);
                tickOsc.stop(currentTime + 0.08);
                
                // Aumentar intervalo gradualmente (desaceleración)
                tickInterval = tickInterval * (1 + progress * 0.1);
                currentTime += tickInterval;
                tickCount++;
                
                if (tickCount > 50) break; // Límite de seguridad
            }
        }
        
        function createRouletteWhooshSound(audioContext, startTime, duration) {
            // Sonido de aire/viento para más realismo
            const bufferSize = audioContext.sampleRate * duration;
            const buffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);
            const data = buffer.getChannelData(0);
            
            // Generar ruido rosa para el efecto whoosh
            let b0 = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0;
            
            for (let i = 0; i < bufferSize; i++) {
                const progress = i / bufferSize;
                const speed = Math.pow(1 - progress, 1.5);
                
                const white = Math.random() * 2 - 1;
                b0 = 0.99886 * b0 + white * 0.0555179;
                b1 = 0.99332 * b1 + white * 0.0750759;
                b2 = 0.96900 * b2 + white * 0.1538520;
                b3 = 0.86650 * b3 + white * 0.3104856;
                b4 = 0.55000 * b4 + white * 0.5329522;
                b5 = -0.7616 * b5 - white * 0.0168980;
                
                const pink = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
                b6 = white * 0.115926;
                
                data[i] = pink * 0.05 * speed;
            }
            
            const source = audioContext.createBufferSource();
            const gainNode = audioContext.createGain();
            const filter = audioContext.createBiquadFilter();
            
            filter.type = 'highpass';
            filter.frequency.setValueAtTime(200, startTime);
            
            source.buffer = buffer;
            source.connect(filter);
            filter.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            gainNode.gain.setValueAtTime(0.8, startTime);
            gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);
            
            source.start(startTime);
        }
        
        function playWinSound() {
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const startTime = audioContext.currentTime;
                
                // Crear un sonido de victoria más elaborado
                createWinMelody(audioContext, startTime);
                createWinHarmony(audioContext, startTime);
                createWinPercussion(audioContext, startTime);
                
            } catch (error) {
                console.log('Audio no soportado en este navegador:', error);
            }
        }
        
        function createWinMelody(audioContext, startTime) {
            // Melodía principal más elaborada
            const melody = [
                { freq: 523.25, time: 0.0 },   // C5
                { freq: 659.25, time: 0.15 },  // E5
                { freq: 783.99, time: 0.3 },   // G5
                { freq: 1046.50, time: 0.45 }, // C6
                { freq: 1318.51, time: 0.6 }   // E6
            ];
            
            melody.forEach((note, index) => {
                const osc = audioContext.createOscillator();
                const gain = audioContext.createGain();
                const filter = audioContext.createBiquadFilter();
                
                // Filtro para dulcificar el sonido
                filter.type = 'lowpass';
                filter.frequency.setValueAtTime(3000, startTime + note.time);
                filter.Q.setValueAtTime(1, startTime + note.time);
                
                osc.connect(filter);
                filter.connect(gain);
                gain.connect(audioContext.destination);
                
                osc.type = 'triangle';
                osc.frequency.setValueAtTime(note.freq, startTime + note.time);
                
                // Envelope más suave
                gain.gain.setValueAtTime(0, startTime + note.time);
                gain.gain.linearRampToValueAtTime(0.25, startTime + note.time + 0.05);
                gain.gain.exponentialRampToValueAtTime(0.001, startTime + note.time + 0.8);
                
                osc.start(startTime + note.time);
                osc.stop(startTime + note.time + 0.8);
            });
        }
        
        function createWinHarmony(audioContext, startTime) {
            // Acordes de acompañamiento
            const chords = [
                [261.63, 329.63, 392.00], // C mayor
                [329.63, 415.30, 493.88], // E mayor
                [392.00, 493.88, 587.33]  // G mayor
            ];
            
            chords.forEach((chord, chordIndex) => {
                chord.forEach(freq => {
                    const osc = audioContext.createOscillator();
                    const gain = audioContext.createGain();
                    
                    osc.connect(gain);
                    gain.connect(audioContext.destination);
                    
                    osc.type = 'sine';
                    osc.frequency.setValueAtTime(freq, startTime + chordIndex * 0.3);
                    
                    gain.gain.setValueAtTime(0, startTime + chordIndex * 0.3);
                    gain.gain.linearRampToValueAtTime(0.08, startTime + chordIndex * 0.3 + 0.1);
                    gain.gain.exponentialRampToValueAtTime(0.001, startTime + chordIndex * 0.3 + 1);
                    
                    osc.start(startTime + chordIndex * 0.3);
                    osc.stop(startTime + chordIndex * 0.3 + 1);
                });
            });
        }
        
        function createWinPercussion(audioContext, startTime) {
            // Efecto de percusión sutil
            for (let i = 0; i < 5; i++) {
                const osc = audioContext.createOscillator();
                const gain = audioContext.createGain();
                const filter = audioContext.createBiquadFilter();
                
                filter.type = 'highpass';
                filter.frequency.setValueAtTime(2000, startTime + i * 0.1);
                
                osc.connect(filter);
                filter.connect(gain);
                gain.connect(audioContext.destination);
                
                osc.type = 'square';
                osc.frequency.setValueAtTime(100 + Math.random() * 200, startTime + i * 0.1);
                
                gain.gain.setValueAtTime(0, startTime + i * 0.1);
                gain.gain.linearRampToValueAtTime(0.1, startTime + i * 0.1 + 0.01);
                gain.gain.exponentialRampToValueAtTime(0.001, startTime + i * 0.1 + 0.15);
                
                osc.start(startTime + i * 0.1);
                osc.stop(startTime + i * 0.1 + 0.15);
            }
        }
        
        function createConfetti() {
            // Crear efecto de confetti simple
            const confettiContainer = document.createElement('div');
            confettiContainer.style.position = 'fixed';
            confettiContainer.style.top = '0';
            confettiContainer.style.left = '0';
            confettiContainer.style.width = '100%';
            confettiContainer.style.height = '100%';
            confettiContainer.style.pointerEvents = 'none';
            confettiContainer.style.zIndex = '9999';
            document.body.appendChild(confettiContainer);
            
            const colors = ['#DAA520', '#8B0000', '#DC143C', '#FFD700', '#FF6B6B'];
            const emojis = ['🎉', '🎊', '✨', '🎁', '⭐'];
            
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                const isEmoji = Math.random() > 0.7;
                
                if (isEmoji) {
                    confetti.innerHTML = emojis[Math.floor(Math.random() * emojis.length)];
                    confetti.style.fontSize = '20px';
                } else {
                    confetti.style.width = '10px';
                    confetti.style.height = '10px';
                    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                    confetti.style.borderRadius = '50%';
                }
                
                confetti.style.position = 'absolute';
                confetti.style.left = Math.random() * 100 + '%';
                confetti.style.top = '-10px';
                confetti.style.animation = `confettiFall ${2 + Math.random() * 3}s ease-out forwards`;
                confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
                
                confettiContainer.appendChild(confetti);
            }
            
            // Limpiar confetti después de la animación
            setTimeout(() => {
                document.body.removeChild(confettiContainer);
            }, 5000);
        }
        
        // Agregar estilos CSS dinámicamente para el confetti
        const style = document.createElement('style');
        style.textContent = `
            @keyframes confettiFall {
                0% {
                    transform: translateY(-10px) rotate(0deg);
                    opacity: 1;
                }
                100% {
                    transform: translateY(100vh) rotate(720deg);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
        
        // Agregar efecto hover mejorado
        document.addEventListener('DOMContentLoaded', function() {
            const mysteryCard = document.getElementById('mysteryCard');
            if (mysteryCard) {
                mysteryCard.addEventListener('mouseenter', function() {
                    if (!isRevealed) {
                        this.style.transform = 'scale(1.05) rotateY(5deg)';
                        this.style.boxShadow = '0 25px 60px rgba(218, 165, 32, 0.4)';
                        
                        // Sonido sutil de hover
                        playHoverSound();
                    }
                });
                
                mysteryCard.addEventListener('mouseleave', function() {
                    if (!isRevealed) {
                        this.style.transform = 'scale(1) rotateY(0deg)';
                        this.style.boxShadow = '0 20px 50px rgba(218, 165, 32, 0.3)';
                    }
                });
            }
        });
        
        function playHoverSound() {
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const startTime = audioContext.currentTime;
                
                // Crear un sonido de hover más sofisticado
                const osc1 = audioContext.createOscillator();
                const osc2 = audioContext.createOscillator();
                const gain = audioContext.createGain();
                const filter = audioContext.createBiquadFilter();
                const merger = audioContext.createChannelMerger(2);
                
                // Configurar filtro pasa-bajos suave
                filter.type = 'lowpass';
                filter.frequency.setValueAtTime(1500, startTime);
                filter.Q.setValueAtTime(0.5, startTime);
                
                // Dos osciladores para crear un sonido más rico
                osc1.type = 'sine';
                osc2.type = 'triangle';
                
                osc1.frequency.setValueAtTime(700, startTime);
                osc1.frequency.linearRampToValueAtTime(900, startTime + 0.15);
                
                osc2.frequency.setValueAtTime(1050, startTime); // Quinta perfecta
                osc2.frequency.linearRampToValueAtTime(1350, startTime + 0.15);
                
                // Conectar
                osc1.connect(merger, 0, 0);
                osc2.connect(merger, 0, 1);
                merger.connect(filter);
                filter.connect(gain);
                gain.connect(audioContext.destination);
                
                // Envelope más suave y natural
                gain.gain.setValueAtTime(0, startTime);
                gain.gain.linearRampToValueAtTime(0.03, startTime + 0.08);
                gain.gain.exponentialRampToValueAtTime(0.001, startTime + 0.25);
                
                osc1.start(startTime);
                osc2.start(startTime);
                osc1.stop(startTime + 0.25);
                osc2.stop(startTime + 0.25);
                
            } catch (error) {
                console.log('Audio no soportado');
            }
        }
    </script>
</body>
</html>